image: golang

stages:
  - build
  - release

build:
  stage: build
  script:
    - go get -u github.com/golang/dep/cmd/dep
    - dep ensure
  only:
    - master

release:
  stage: release
  variables:
    GOX_OS: "darwin linux windows"
    GOX_ARCH: "386 amd64"
    GOX_DIST_DIR: "_dist-gox"
    GLR_DIST_DIR: "_dist-glr"
  script:
    - apt-get update && apt-get -y install zip
    - go get -u github.com/mitchellh/gox
    - go get -u gitlab.com/longkey1/glr
    - mkdir -p ${CI_PROJECT_DIR}/${GOX_DIST_DIR}
    - gox -os="${GOX_OS}" -arch="${GOX_ARCH}" -output="${CI_PROJECT_DIR}/${GOX_DIST_DIR}/{{.Dir}}_{{.OS}}_{{.Arch}}" ./...
    - mkdir -p ${CI_PROJECT_DIR}/${GLR_DIST_DIR}
    - |
      pushd ${GOX_DIST_DIR}; \
      for TARGET in $(find ${CI_PROJECT_DIR}/${GOX_DIST_DIR} -mindepth 1 -maxdepth 1 -type f); do \
        ARCHIVE_NAME="$(basename ${TARGET})"; \
        zip -r ${CI_PROJECT_DIR}/${GLR_DIST_DIR}/${ARCHIVE_NAME}.zip ./${ARCHIVE_NAME}; \
      done; \
      popd
    - go build
    - glr -t ${GL_PRIVATE_TOKEN} ${CI_PROJECT_PATH} v$(./glr --version | cut -d " " -f 3) ${CI_PROJECT_DIR}/${GLR_DIST_DIR}
  only:
    - master
